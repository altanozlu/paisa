// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package gql

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/Khan/genqlient/graphql"
)

// EtfGetEtfInformationEtf includes the requested fields of the GraphQL type Etf.
type EtfGetEtfInformationEtf struct {
	Isin               string                                      `json:"isin"`
	Name               string                                      `json:"name"`
	PriceEarningsRatio float64                                     `json:"priceEarningsRatio"`
	Holdings           []EtfGetEtfInformationEtfHoldingsEtfholding `json:"-"`
}

// GetIsin returns EtfGetEtfInformationEtf.Isin, and is useful for accessing the field via an interface.
func (v *EtfGetEtfInformationEtf) GetIsin() string { return v.Isin }

// GetName returns EtfGetEtfInformationEtf.Name, and is useful for accessing the field via an interface.
func (v *EtfGetEtfInformationEtf) GetName() string { return v.Name }

// GetPriceEarningsRatio returns EtfGetEtfInformationEtf.PriceEarningsRatio, and is useful for accessing the field via an interface.
func (v *EtfGetEtfInformationEtf) GetPriceEarningsRatio() float64 { return v.PriceEarningsRatio }

// GetHoldings returns EtfGetEtfInformationEtf.Holdings, and is useful for accessing the field via an interface.
func (v *EtfGetEtfInformationEtf) GetHoldings() []EtfGetEtfInformationEtfHoldingsEtfholding {
	return v.Holdings
}

func (v *EtfGetEtfInformationEtf) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*EtfGetEtfInformationEtf
		Holdings []json.RawMessage `json:"holdings"`
		graphql.NoUnmarshalJSON
	}
	firstPass.EtfGetEtfInformationEtf = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Holdings
		src := firstPass.Holdings
		*dst = make(
			[]EtfGetEtfInformationEtfHoldingsEtfholding,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			if len(src) != 0 && string(src) != "null" {
				err = __unmarshalEtfGetEtfInformationEtfHoldingsEtfholding(
					src, dst)
				if err != nil {
					return fmt.Errorf(
						"unable to unmarshal EtfGetEtfInformationEtf.Holdings: %w", err)
				}
			}
		}
	}
	return nil
}

type __premarshalEtfGetEtfInformationEtf struct {
	Isin string `json:"isin"`

	Name string `json:"name"`

	PriceEarningsRatio float64 `json:"priceEarningsRatio"`

	Holdings []json.RawMessage `json:"holdings"`
}

func (v *EtfGetEtfInformationEtf) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *EtfGetEtfInformationEtf) __premarshalJSON() (*__premarshalEtfGetEtfInformationEtf, error) {
	var retval __premarshalEtfGetEtfInformationEtf

	retval.Isin = v.Isin
	retval.Name = v.Name
	retval.PriceEarningsRatio = v.PriceEarningsRatio
	{

		dst := &retval.Holdings
		src := v.Holdings
		*dst = make(
			[]json.RawMessage,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			var err error
			*dst, err = __marshalEtfGetEtfInformationEtfHoldingsEtfholding(
				&src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal EtfGetEtfInformationEtf.Holdings: %w", err)
			}
		}
	}
	return &retval, nil
}

// EtfGetEtfInformationEtfHoldingsEtfholding includes the requested fields of the GraphQL interface Etfholding.
//
// EtfGetEtfInformationEtfHoldingsEtfholding is implemented by the following types:
// EtfGetEtfInformationEtfHoldingsEtfholdingBond
// EtfGetEtfInformationEtfHoldingsEtfholdingCash
// EtfGetEtfInformationEtfHoldingsEtfholdingCorporateBond
// EtfGetEtfInformationEtfHoldingsEtfholdingEquity
// EtfGetEtfInformationEtfHoldingsEtfholdingFuture
// EtfGetEtfInformationEtfHoldingsEtfholdingMutualFund
// EtfGetEtfInformationEtfHoldingsEtfholdingRight
type EtfGetEtfInformationEtfHoldingsEtfholding interface {
	implementsGraphQLInterfaceEtfGetEtfInformationEtfHoldingsEtfholding()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() string
	// GetName returns the interface-field "name" from its implementation.
	GetName() string
	// GetWeighting returns the interface-field "weighting" from its implementation.
	GetWeighting() float64
	// GetCountry returns the interface-field "country" from its implementation.
	GetCountry() string
}

func (v *EtfGetEtfInformationEtfHoldingsEtfholdingBond) implementsGraphQLInterfaceEtfGetEtfInformationEtfHoldingsEtfholding() {
}
func (v *EtfGetEtfInformationEtfHoldingsEtfholdingCash) implementsGraphQLInterfaceEtfGetEtfInformationEtfHoldingsEtfholding() {
}
func (v *EtfGetEtfInformationEtfHoldingsEtfholdingCorporateBond) implementsGraphQLInterfaceEtfGetEtfInformationEtfHoldingsEtfholding() {
}
func (v *EtfGetEtfInformationEtfHoldingsEtfholdingEquity) implementsGraphQLInterfaceEtfGetEtfInformationEtfHoldingsEtfholding() {
}
func (v *EtfGetEtfInformationEtfHoldingsEtfholdingFuture) implementsGraphQLInterfaceEtfGetEtfInformationEtfHoldingsEtfholding() {
}
func (v *EtfGetEtfInformationEtfHoldingsEtfholdingMutualFund) implementsGraphQLInterfaceEtfGetEtfInformationEtfHoldingsEtfholding() {
}
func (v *EtfGetEtfInformationEtfHoldingsEtfholdingRight) implementsGraphQLInterfaceEtfGetEtfInformationEtfHoldingsEtfholding() {
}

func __unmarshalEtfGetEtfInformationEtfHoldingsEtfholding(b []byte, v *EtfGetEtfInformationEtfHoldingsEtfholding) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "EtfholdingBond":
		*v = new(EtfGetEtfInformationEtfHoldingsEtfholdingBond)
		return json.Unmarshal(b, *v)
	case "EtfholdingCash":
		*v = new(EtfGetEtfInformationEtfHoldingsEtfholdingCash)
		return json.Unmarshal(b, *v)
	case "EtfholdingCorporateBond":
		*v = new(EtfGetEtfInformationEtfHoldingsEtfholdingCorporateBond)
		return json.Unmarshal(b, *v)
	case "EtfholdingEquity":
		*v = new(EtfGetEtfInformationEtfHoldingsEtfholdingEquity)
		return json.Unmarshal(b, *v)
	case "EtfholdingFuture":
		*v = new(EtfGetEtfInformationEtfHoldingsEtfholdingFuture)
		return json.Unmarshal(b, *v)
	case "EtfholdingMutualFund":
		*v = new(EtfGetEtfInformationEtfHoldingsEtfholdingMutualFund)
		return json.Unmarshal(b, *v)
	case "EtfholdingRight":
		*v = new(EtfGetEtfInformationEtfHoldingsEtfholdingRight)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing Etfholding.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for EtfGetEtfInformationEtfHoldingsEtfholding: "%v"`, tn.TypeName)
	}
}

func __marshalEtfGetEtfInformationEtfHoldingsEtfholding(v *EtfGetEtfInformationEtfHoldingsEtfholding) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *EtfGetEtfInformationEtfHoldingsEtfholdingBond:
		typename = "EtfholdingBond"

		result := struct {
			TypeName string `json:"__typename"`
			*EtfGetEtfInformationEtfHoldingsEtfholdingBond
		}{typename, v}
		return json.Marshal(result)
	case *EtfGetEtfInformationEtfHoldingsEtfholdingCash:
		typename = "EtfholdingCash"

		result := struct {
			TypeName string `json:"__typename"`
			*EtfGetEtfInformationEtfHoldingsEtfholdingCash
		}{typename, v}
		return json.Marshal(result)
	case *EtfGetEtfInformationEtfHoldingsEtfholdingCorporateBond:
		typename = "EtfholdingCorporateBond"

		result := struct {
			TypeName string `json:"__typename"`
			*EtfGetEtfInformationEtfHoldingsEtfholdingCorporateBond
		}{typename, v}
		return json.Marshal(result)
	case *EtfGetEtfInformationEtfHoldingsEtfholdingEquity:
		typename = "EtfholdingEquity"

		result := struct {
			TypeName string `json:"__typename"`
			*EtfGetEtfInformationEtfHoldingsEtfholdingEquity
		}{typename, v}
		return json.Marshal(result)
	case *EtfGetEtfInformationEtfHoldingsEtfholdingFuture:
		typename = "EtfholdingFuture"

		result := struct {
			TypeName string `json:"__typename"`
			*EtfGetEtfInformationEtfHoldingsEtfholdingFuture
		}{typename, v}
		return json.Marshal(result)
	case *EtfGetEtfInformationEtfHoldingsEtfholdingMutualFund:
		typename = "EtfholdingMutualFund"

		result := struct {
			TypeName string `json:"__typename"`
			*EtfGetEtfInformationEtfHoldingsEtfholdingMutualFund
		}{typename, v}
		return json.Marshal(result)
	case *EtfGetEtfInformationEtfHoldingsEtfholdingRight:
		typename = "EtfholdingRight"

		result := struct {
			TypeName string `json:"__typename"`
			*EtfGetEtfInformationEtfHoldingsEtfholdingRight
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for EtfGetEtfInformationEtfHoldingsEtfholding: "%T"`, v)
	}
}

// EtfGetEtfInformationEtfHoldingsEtfholdingBond includes the requested fields of the GraphQL type EtfholdingBond.
type EtfGetEtfInformationEtfHoldingsEtfholdingBond struct {
	Typename  string  `json:"__typename"`
	Name      string  `json:"name"`
	Weighting float64 `json:"weighting"`
	Country   string  `json:"country"`
	Isin      string  `json:"isin"`
}

// GetTypename returns EtfGetEtfInformationEtfHoldingsEtfholdingBond.Typename, and is useful for accessing the field via an interface.
func (v *EtfGetEtfInformationEtfHoldingsEtfholdingBond) GetTypename() string { return v.Typename }

// GetName returns EtfGetEtfInformationEtfHoldingsEtfholdingBond.Name, and is useful for accessing the field via an interface.
func (v *EtfGetEtfInformationEtfHoldingsEtfholdingBond) GetName() string { return v.Name }

// GetWeighting returns EtfGetEtfInformationEtfHoldingsEtfholdingBond.Weighting, and is useful for accessing the field via an interface.
func (v *EtfGetEtfInformationEtfHoldingsEtfholdingBond) GetWeighting() float64 { return v.Weighting }

// GetCountry returns EtfGetEtfInformationEtfHoldingsEtfholdingBond.Country, and is useful for accessing the field via an interface.
func (v *EtfGetEtfInformationEtfHoldingsEtfholdingBond) GetCountry() string { return v.Country }

// GetIsin returns EtfGetEtfInformationEtfHoldingsEtfholdingBond.Isin, and is useful for accessing the field via an interface.
func (v *EtfGetEtfInformationEtfHoldingsEtfholdingBond) GetIsin() string { return v.Isin }

// EtfGetEtfInformationEtfHoldingsEtfholdingCash includes the requested fields of the GraphQL type EtfholdingCash.
type EtfGetEtfInformationEtfHoldingsEtfholdingCash struct {
	Typename  string  `json:"__typename"`
	Name      string  `json:"name"`
	Weighting float64 `json:"weighting"`
	Country   string  `json:"country"`
	Currency  string  `json:"currency"`
}

// GetTypename returns EtfGetEtfInformationEtfHoldingsEtfholdingCash.Typename, and is useful for accessing the field via an interface.
func (v *EtfGetEtfInformationEtfHoldingsEtfholdingCash) GetTypename() string { return v.Typename }

// GetName returns EtfGetEtfInformationEtfHoldingsEtfholdingCash.Name, and is useful for accessing the field via an interface.
func (v *EtfGetEtfInformationEtfHoldingsEtfholdingCash) GetName() string { return v.Name }

// GetWeighting returns EtfGetEtfInformationEtfHoldingsEtfholdingCash.Weighting, and is useful for accessing the field via an interface.
func (v *EtfGetEtfInformationEtfHoldingsEtfholdingCash) GetWeighting() float64 { return v.Weighting }

// GetCountry returns EtfGetEtfInformationEtfHoldingsEtfholdingCash.Country, and is useful for accessing the field via an interface.
func (v *EtfGetEtfInformationEtfHoldingsEtfholdingCash) GetCountry() string { return v.Country }

// GetCurrency returns EtfGetEtfInformationEtfHoldingsEtfholdingCash.Currency, and is useful for accessing the field via an interface.
func (v *EtfGetEtfInformationEtfHoldingsEtfholdingCash) GetCurrency() string { return v.Currency }

// EtfGetEtfInformationEtfHoldingsEtfholdingCorporateBond includes the requested fields of the GraphQL type EtfholdingCorporateBond.
type EtfGetEtfInformationEtfHoldingsEtfholdingCorporateBond struct {
	Typename  string  `json:"__typename"`
	Name      string  `json:"name"`
	Weighting float64 `json:"weighting"`
	Country   string  `json:"country"`
	Isin      string  `json:"isin"`
}

// GetTypename returns EtfGetEtfInformationEtfHoldingsEtfholdingCorporateBond.Typename, and is useful for accessing the field via an interface.
func (v *EtfGetEtfInformationEtfHoldingsEtfholdingCorporateBond) GetTypename() string {
	return v.Typename
}

// GetName returns EtfGetEtfInformationEtfHoldingsEtfholdingCorporateBond.Name, and is useful for accessing the field via an interface.
func (v *EtfGetEtfInformationEtfHoldingsEtfholdingCorporateBond) GetName() string { return v.Name }

// GetWeighting returns EtfGetEtfInformationEtfHoldingsEtfholdingCorporateBond.Weighting, and is useful for accessing the field via an interface.
func (v *EtfGetEtfInformationEtfHoldingsEtfholdingCorporateBond) GetWeighting() float64 {
	return v.Weighting
}

// GetCountry returns EtfGetEtfInformationEtfHoldingsEtfholdingCorporateBond.Country, and is useful for accessing the field via an interface.
func (v *EtfGetEtfInformationEtfHoldingsEtfholdingCorporateBond) GetCountry() string {
	return v.Country
}

// GetIsin returns EtfGetEtfInformationEtfHoldingsEtfholdingCorporateBond.Isin, and is useful for accessing the field via an interface.
func (v *EtfGetEtfInformationEtfHoldingsEtfholdingCorporateBond) GetIsin() string { return v.Isin }

// EtfGetEtfInformationEtfHoldingsEtfholdingEquity includes the requested fields of the GraphQL type EtfholdingEquity.
type EtfGetEtfInformationEtfHoldingsEtfholdingEquity struct {
	Typename         string                                                               `json:"__typename"`
	Name             string                                                               `json:"name"`
	Weighting        float64                                                              `json:"weighting"`
	Country          string                                                               `json:"country"`
	Isin             string                                                               `json:"isin"`
	Industry         string                                                               `json:"industry"`
	StockInformation EtfGetEtfInformationEtfHoldingsEtfholdingEquityStockInformationStock `json:"stockInformation"`
}

// GetTypename returns EtfGetEtfInformationEtfHoldingsEtfholdingEquity.Typename, and is useful for accessing the field via an interface.
func (v *EtfGetEtfInformationEtfHoldingsEtfholdingEquity) GetTypename() string { return v.Typename }

// GetName returns EtfGetEtfInformationEtfHoldingsEtfholdingEquity.Name, and is useful for accessing the field via an interface.
func (v *EtfGetEtfInformationEtfHoldingsEtfholdingEquity) GetName() string { return v.Name }

// GetWeighting returns EtfGetEtfInformationEtfHoldingsEtfholdingEquity.Weighting, and is useful for accessing the field via an interface.
func (v *EtfGetEtfInformationEtfHoldingsEtfholdingEquity) GetWeighting() float64 { return v.Weighting }

// GetCountry returns EtfGetEtfInformationEtfHoldingsEtfholdingEquity.Country, and is useful for accessing the field via an interface.
func (v *EtfGetEtfInformationEtfHoldingsEtfholdingEquity) GetCountry() string { return v.Country }

// GetIsin returns EtfGetEtfInformationEtfHoldingsEtfholdingEquity.Isin, and is useful for accessing the field via an interface.
func (v *EtfGetEtfInformationEtfHoldingsEtfholdingEquity) GetIsin() string { return v.Isin }

// GetIndustry returns EtfGetEtfInformationEtfHoldingsEtfholdingEquity.Industry, and is useful for accessing the field via an interface.
func (v *EtfGetEtfInformationEtfHoldingsEtfholdingEquity) GetIndustry() string { return v.Industry }

// GetStockInformation returns EtfGetEtfInformationEtfHoldingsEtfholdingEquity.StockInformation, and is useful for accessing the field via an interface.
func (v *EtfGetEtfInformationEtfHoldingsEtfholdingEquity) GetStockInformation() EtfGetEtfInformationEtfHoldingsEtfholdingEquityStockInformationStock {
	return v.StockInformation
}

// EtfGetEtfInformationEtfHoldingsEtfholdingEquityStockInformationStock includes the requested fields of the GraphQL type Stock.
type EtfGetEtfInformationEtfHoldingsEtfholdingEquityStockInformationStock struct {
	PriceEarningsRatio float64 `json:"priceEarningsRatio"`
}

// GetPriceEarningsRatio returns EtfGetEtfInformationEtfHoldingsEtfholdingEquityStockInformationStock.PriceEarningsRatio, and is useful for accessing the field via an interface.
func (v *EtfGetEtfInformationEtfHoldingsEtfholdingEquityStockInformationStock) GetPriceEarningsRatio() float64 {
	return v.PriceEarningsRatio
}

// EtfGetEtfInformationEtfHoldingsEtfholdingFuture includes the requested fields of the GraphQL type EtfholdingFuture.
type EtfGetEtfInformationEtfHoldingsEtfholdingFuture struct {
	Typename  string  `json:"__typename"`
	Name      string  `json:"name"`
	Weighting float64 `json:"weighting"`
	Country   string  `json:"country"`
	Isin      string  `json:"isin"`
}

// GetTypename returns EtfGetEtfInformationEtfHoldingsEtfholdingFuture.Typename, and is useful for accessing the field via an interface.
func (v *EtfGetEtfInformationEtfHoldingsEtfholdingFuture) GetTypename() string { return v.Typename }

// GetName returns EtfGetEtfInformationEtfHoldingsEtfholdingFuture.Name, and is useful for accessing the field via an interface.
func (v *EtfGetEtfInformationEtfHoldingsEtfholdingFuture) GetName() string { return v.Name }

// GetWeighting returns EtfGetEtfInformationEtfHoldingsEtfholdingFuture.Weighting, and is useful for accessing the field via an interface.
func (v *EtfGetEtfInformationEtfHoldingsEtfholdingFuture) GetWeighting() float64 { return v.Weighting }

// GetCountry returns EtfGetEtfInformationEtfHoldingsEtfholdingFuture.Country, and is useful for accessing the field via an interface.
func (v *EtfGetEtfInformationEtfHoldingsEtfholdingFuture) GetCountry() string { return v.Country }

// GetIsin returns EtfGetEtfInformationEtfHoldingsEtfholdingFuture.Isin, and is useful for accessing the field via an interface.
func (v *EtfGetEtfInformationEtfHoldingsEtfholdingFuture) GetIsin() string { return v.Isin }

// EtfGetEtfInformationEtfHoldingsEtfholdingMutualFund includes the requested fields of the GraphQL type EtfholdingMutualFund.
type EtfGetEtfInformationEtfHoldingsEtfholdingMutualFund struct {
	Typename  string  `json:"__typename"`
	Name      string  `json:"name"`
	Weighting float64 `json:"weighting"`
	Country   string  `json:"country"`
	Isin      string  `json:"isin"`
}

// GetTypename returns EtfGetEtfInformationEtfHoldingsEtfholdingMutualFund.Typename, and is useful for accessing the field via an interface.
func (v *EtfGetEtfInformationEtfHoldingsEtfholdingMutualFund) GetTypename() string { return v.Typename }

// GetName returns EtfGetEtfInformationEtfHoldingsEtfholdingMutualFund.Name, and is useful for accessing the field via an interface.
func (v *EtfGetEtfInformationEtfHoldingsEtfholdingMutualFund) GetName() string { return v.Name }

// GetWeighting returns EtfGetEtfInformationEtfHoldingsEtfholdingMutualFund.Weighting, and is useful for accessing the field via an interface.
func (v *EtfGetEtfInformationEtfHoldingsEtfholdingMutualFund) GetWeighting() float64 {
	return v.Weighting
}

// GetCountry returns EtfGetEtfInformationEtfHoldingsEtfholdingMutualFund.Country, and is useful for accessing the field via an interface.
func (v *EtfGetEtfInformationEtfHoldingsEtfholdingMutualFund) GetCountry() string { return v.Country }

// GetIsin returns EtfGetEtfInformationEtfHoldingsEtfholdingMutualFund.Isin, and is useful for accessing the field via an interface.
func (v *EtfGetEtfInformationEtfHoldingsEtfholdingMutualFund) GetIsin() string { return v.Isin }

// EtfGetEtfInformationEtfHoldingsEtfholdingRight includes the requested fields of the GraphQL type EtfholdingRight.
type EtfGetEtfInformationEtfHoldingsEtfholdingRight struct {
	Typename  string  `json:"__typename"`
	Name      string  `json:"name"`
	Weighting float64 `json:"weighting"`
	Country   string  `json:"country"`
	Isin      string  `json:"isin"`
}

// GetTypename returns EtfGetEtfInformationEtfHoldingsEtfholdingRight.Typename, and is useful for accessing the field via an interface.
func (v *EtfGetEtfInformationEtfHoldingsEtfholdingRight) GetTypename() string { return v.Typename }

// GetName returns EtfGetEtfInformationEtfHoldingsEtfholdingRight.Name, and is useful for accessing the field via an interface.
func (v *EtfGetEtfInformationEtfHoldingsEtfholdingRight) GetName() string { return v.Name }

// GetWeighting returns EtfGetEtfInformationEtfHoldingsEtfholdingRight.Weighting, and is useful for accessing the field via an interface.
func (v *EtfGetEtfInformationEtfHoldingsEtfholdingRight) GetWeighting() float64 { return v.Weighting }

// GetCountry returns EtfGetEtfInformationEtfHoldingsEtfholdingRight.Country, and is useful for accessing the field via an interface.
func (v *EtfGetEtfInformationEtfHoldingsEtfholdingRight) GetCountry() string { return v.Country }

// GetIsin returns EtfGetEtfInformationEtfHoldingsEtfholdingRight.Isin, and is useful for accessing the field via an interface.
func (v *EtfGetEtfInformationEtfHoldingsEtfholdingRight) GetIsin() string { return v.Isin }

// EtfResponse is returned by Etf on success.
type EtfResponse struct {
	GetEtfInformation EtfGetEtfInformationEtf `json:"getEtfInformation"`
}

// GetGetEtfInformation returns EtfResponse.GetEtfInformation, and is useful for accessing the field via an interface.
func (v *EtfResponse) GetGetEtfInformation() EtfGetEtfInformationEtf { return v.GetEtfInformation }

type GetSymbolOptions struct {
	Currency          string `json:"currency"`
	PreferredExchange string `json:"preferredExchange"`
	Text              string `json:"text"`
	SymbolName        string `json:"symbolName"`
}

// GetCurrency returns GetSymbolOptions.Currency, and is useful for accessing the field via an interface.
func (v *GetSymbolOptions) GetCurrency() string { return v.Currency }

// GetPreferredExchange returns GetSymbolOptions.PreferredExchange, and is useful for accessing the field via an interface.
func (v *GetSymbolOptions) GetPreferredExchange() string { return v.PreferredExchange }

// GetText returns GetSymbolOptions.Text, and is useful for accessing the field via an interface.
func (v *GetSymbolOptions) GetText() string { return v.Text }

// GetSymbolName returns GetSymbolOptions.SymbolName, and is useful for accessing the field via an interface.
func (v *GetSymbolOptions) GetSymbolName() string { return v.SymbolName }

// __EtfInput is used internally by genqlient
type __EtfInput struct {
	Options GetSymbolOptions `json:"options"`
}

// GetOptions returns __EtfInput.Options, and is useful for accessing the field via an interface.
func (v *__EtfInput) GetOptions() GetSymbolOptions { return v.Options }

// The query executed by Etf.
const Etf_Operation = `
query Etf ($options: GetSymbolOptions!) {
	getEtfInformation(options: $options) {
		isin
		name
		priceEarningsRatio
		holdings {
			__typename
			name
			weighting
			country
			... on EtfholdingEquity {
				isin
				industry
				stockInformation {
					priceEarningsRatio
				}
			}
			... on EtfholdingMutualFund {
				isin
			}
			... on EtfholdingCorporateBond {
				isin
			}
			... on EtfholdingFuture {
				isin
			}
			... on EtfholdingBond {
				isin
			}
			... on EtfholdingCash {
				currency
			}
			... on EtfholdingRight {
				isin
			}
		}
	}
}
`

func Etf(
	ctx_ context.Context,
	client_ graphql.Client,
	options GetSymbolOptions,
) (data_ *EtfResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "Etf",
		Query:  Etf_Operation,
		Variables: &__EtfInput{
			Options: options,
		},
	}

	data_ = &EtfResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}
